import java.util.*;

public class Break_EvenPoint {
	
//	손익분기점을 계산하는 아주 간단한 예제이다. 무언가 틀렸을 땐 그 문제에서 유난히 눈에 띄는 조건을 확인하는 것이 좋다. 
//	유난히 눈에 띄는 것은 "21억 이하의 자연수"라는 것을 굳이 언급한 것이였고, 제한시간이 "0.35초"였다는 것이다. 
//	이 둘이 눈에 띄었지만 신경을 쓰지 않아서 문제해답을 찾는데 오랜시간이 걸렸다. 
//	이 두가지 요소는 다음과 같이 활용된다.
//	0.35초라는 시간은 반복문을 사용한다면 21억까지 계산하는 데 촉박한시간이다. 즉, 반복문을 사용하지 말고 수학적인 공식을 찾아내서 
//	답을 출력하라는 의도였다. 
//	"같은 출력, 다른 방법"으로 접근했으면 좀 더 오류를 빨리 찾아냈을 것 같다. 

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int a = scan.nextInt();
//		초기지출비용을 입력한다.
		int b = scan.nextInt();
//		제품 한 대의 생산비용을 입력한다.
		int c = scan.nextInt();
// 		제품 한 개당의 수익을 입력한다.


		if(b>=c)
			System.out.print(-1);
//		b가 c보다 크거나 같으면 절대로 수익을 낼 수가 없다. 
//		반대로 b가 c보다 조금이라도 크다면  반드시 수익을 낸다.
		else 
			System.out.print(a/(c-b)+1);
//		손익분기점을 구하는 공식을 바로 출력한다. 
//		이 공식을 찾아내는 것, 반복문을 사용하지 않는 것이 이 문제의 핵심이였다.
	}
}
